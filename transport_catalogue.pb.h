// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_catalogue.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transport_5fcatalogue_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transport_5fcatalogue_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5fcatalogue_2eproto;
namespace TransportCataloguePB {
class AllInfo;
struct AllInfoDefaultTypeInternal;
extern AllInfoDefaultTypeInternal _AllInfo_default_instance_;
class Bus;
struct BusDefaultTypeInternal;
extern BusDefaultTypeInternal _Bus_default_instance_;
class Color;
struct ColorDefaultTypeInternal;
extern ColorDefaultTypeInternal _Color_default_instance_;
class Coordinates;
struct CoordinatesDefaultTypeInternal;
extern CoordinatesDefaultTypeInternal _Coordinates_default_instance_;
class DistanceBetweenStops;
struct DistanceBetweenStopsDefaultTypeInternal;
extern DistanceBetweenStopsDefaultTypeInternal _DistanceBetweenStops_default_instance_;
class Point;
struct PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class RenderSettings;
struct RenderSettingsDefaultTypeInternal;
extern RenderSettingsDefaultTypeInternal _RenderSettings_default_instance_;
class RoutingSettings;
struct RoutingSettingsDefaultTypeInternal;
extern RoutingSettingsDefaultTypeInternal _RoutingSettings_default_instance_;
class Stop;
struct StopDefaultTypeInternal;
extern StopDefaultTypeInternal _Stop_default_instance_;
class TransportCatalogue;
struct TransportCatalogueDefaultTypeInternal;
extern TransportCatalogueDefaultTypeInternal _TransportCatalogue_default_instance_;
}  // namespace TransportCataloguePB
PROTOBUF_NAMESPACE_OPEN
template<> ::TransportCataloguePB::AllInfo* Arena::CreateMaybeMessage<::TransportCataloguePB::AllInfo>(Arena*);
template<> ::TransportCataloguePB::Bus* Arena::CreateMaybeMessage<::TransportCataloguePB::Bus>(Arena*);
template<> ::TransportCataloguePB::Color* Arena::CreateMaybeMessage<::TransportCataloguePB::Color>(Arena*);
template<> ::TransportCataloguePB::Coordinates* Arena::CreateMaybeMessage<::TransportCataloguePB::Coordinates>(Arena*);
template<> ::TransportCataloguePB::DistanceBetweenStops* Arena::CreateMaybeMessage<::TransportCataloguePB::DistanceBetweenStops>(Arena*);
template<> ::TransportCataloguePB::Point* Arena::CreateMaybeMessage<::TransportCataloguePB::Point>(Arena*);
template<> ::TransportCataloguePB::RenderSettings* Arena::CreateMaybeMessage<::TransportCataloguePB::RenderSettings>(Arena*);
template<> ::TransportCataloguePB::RoutingSettings* Arena::CreateMaybeMessage<::TransportCataloguePB::RoutingSettings>(Arena*);
template<> ::TransportCataloguePB::Stop* Arena::CreateMaybeMessage<::TransportCataloguePB::Stop>(Arena*);
template<> ::TransportCataloguePB::TransportCatalogue* Arena::CreateMaybeMessage<::TransportCataloguePB::TransportCatalogue>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TransportCataloguePB {

// ===================================================================

class Coordinates final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransportCataloguePB.Coordinates) */ {
 public:
  inline Coordinates() : Coordinates(nullptr) {}
  ~Coordinates() override;
  explicit PROTOBUF_CONSTEXPR Coordinates(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Coordinates(const Coordinates& from);
  Coordinates(Coordinates&& from) noexcept
    : Coordinates() {
    *this = ::std::move(from);
  }

  inline Coordinates& operator=(const Coordinates& from) {
    CopyFrom(from);
    return *this;
  }
  inline Coordinates& operator=(Coordinates&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Coordinates& default_instance() {
    return *internal_default_instance();
  }
  static inline const Coordinates* internal_default_instance() {
    return reinterpret_cast<const Coordinates*>(
               &_Coordinates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Coordinates& a, Coordinates& b) {
    a.Swap(&b);
  }
  inline void Swap(Coordinates* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Coordinates* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Coordinates* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Coordinates>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Coordinates& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Coordinates& from) {
    Coordinates::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Coordinates* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransportCataloguePB.Coordinates";
  }
  protected:
  explicit Coordinates(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatFieldNumber = 1,
    kLngFieldNumber = 2,
  };
  // double lat = 1;
  void clear_lat();
  double lat() const;
  void set_lat(double value);
  private:
  double _internal_lat() const;
  void _internal_set_lat(double value);
  public:

  // double lng = 2;
  void clear_lng();
  double lng() const;
  void set_lng(double value);
  private:
  double _internal_lng() const;
  void _internal_set_lng(double value);
  public:

  // @@protoc_insertion_point(class_scope:TransportCataloguePB.Coordinates)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double lat_;
    double lng_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Stop final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransportCataloguePB.Stop) */ {
 public:
  inline Stop() : Stop(nullptr) {}
  ~Stop() override;
  explicit PROTOBUF_CONSTEXPR Stop(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Stop(const Stop& from);
  Stop(Stop&& from) noexcept
    : Stop() {
    *this = ::std::move(from);
  }

  inline Stop& operator=(const Stop& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stop& operator=(Stop&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Stop& default_instance() {
    return *internal_default_instance();
  }
  static inline const Stop* internal_default_instance() {
    return reinterpret_cast<const Stop*>(
               &_Stop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Stop& a, Stop& b) {
    a.Swap(&b);
  }
  inline void Swap(Stop* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Stop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Stop>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Stop& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Stop& from) {
    Stop::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stop* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransportCataloguePB.Stop";
  }
  protected:
  explicit Stop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCoordinatesFieldNumber = 2,
    kVertexIdFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .TransportCataloguePB.Coordinates coordinates = 2;
  bool has_coordinates() const;
  private:
  bool _internal_has_coordinates() const;
  public:
  void clear_coordinates();
  const ::TransportCataloguePB::Coordinates& coordinates() const;
  PROTOBUF_NODISCARD ::TransportCataloguePB::Coordinates* release_coordinates();
  ::TransportCataloguePB::Coordinates* mutable_coordinates();
  void set_allocated_coordinates(::TransportCataloguePB::Coordinates* coordinates);
  private:
  const ::TransportCataloguePB::Coordinates& _internal_coordinates() const;
  ::TransportCataloguePB::Coordinates* _internal_mutable_coordinates();
  public:
  void unsafe_arena_set_allocated_coordinates(
      ::TransportCataloguePB::Coordinates* coordinates);
  ::TransportCataloguePB::Coordinates* unsafe_arena_release_coordinates();

  // uint32 vertex_id = 3;
  void clear_vertex_id();
  uint32_t vertex_id() const;
  void set_vertex_id(uint32_t value);
  private:
  uint32_t _internal_vertex_id() const;
  void _internal_set_vertex_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TransportCataloguePB.Stop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::TransportCataloguePB::Coordinates* coordinates_;
    uint32_t vertex_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Bus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransportCataloguePB.Bus) */ {
 public:
  inline Bus() : Bus(nullptr) {}
  ~Bus() override;
  explicit PROTOBUF_CONSTEXPR Bus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bus(const Bus& from);
  Bus(Bus&& from) noexcept
    : Bus() {
    *this = ::std::move(from);
  }

  inline Bus& operator=(const Bus& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bus& operator=(Bus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Bus& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bus* internal_default_instance() {
    return reinterpret_cast<const Bus*>(
               &_Bus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Bus& a, Bus& b) {
    a.Swap(&b);
  }
  inline void Swap(Bus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Bus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Bus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Bus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Bus& from) {
    Bus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransportCataloguePB.Bus";
  }
  protected:
  explicit Bus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopIdPbArrayFieldNumber = 2,
    kNameFieldNumber = 1,
    kRouteLengthFieldNumber = 4,
    kUniqueStopsNumberFieldNumber = 3,
    kIsRoundtripFieldNumber = 6,
    kCurvatureFieldNumber = 5,
  };
  // repeated uint32 stop_id_pb_array = 2;
  int stop_id_pb_array_size() const;
  private:
  int _internal_stop_id_pb_array_size() const;
  public:
  void clear_stop_id_pb_array();
  private:
  uint32_t _internal_stop_id_pb_array(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_stop_id_pb_array() const;
  void _internal_add_stop_id_pb_array(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_stop_id_pb_array();
  public:
  uint32_t stop_id_pb_array(int index) const;
  void set_stop_id_pb_array(int index, uint32_t value);
  void add_stop_id_pb_array(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      stop_id_pb_array() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_stop_id_pb_array();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // double route_length = 4;
  void clear_route_length();
  double route_length() const;
  void set_route_length(double value);
  private:
  double _internal_route_length() const;
  void _internal_set_route_length(double value);
  public:

  // uint32 unique_stops_number = 3;
  void clear_unique_stops_number();
  uint32_t unique_stops_number() const;
  void set_unique_stops_number(uint32_t value);
  private:
  uint32_t _internal_unique_stops_number() const;
  void _internal_set_unique_stops_number(uint32_t value);
  public:

  // bool is_roundtrip = 6;
  void clear_is_roundtrip();
  bool is_roundtrip() const;
  void set_is_roundtrip(bool value);
  private:
  bool _internal_is_roundtrip() const;
  void _internal_set_is_roundtrip(bool value);
  public:

  // double curvature = 5;
  void clear_curvature();
  double curvature() const;
  void set_curvature(double value);
  private:
  double _internal_curvature() const;
  void _internal_set_curvature(double value);
  public:

  // @@protoc_insertion_point(class_scope:TransportCataloguePB.Bus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > stop_id_pb_array_;
    mutable std::atomic<int> _stop_id_pb_array_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    double route_length_;
    uint32_t unique_stops_number_;
    bool is_roundtrip_;
    double curvature_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class DistanceBetweenStops final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransportCataloguePB.DistanceBetweenStops) */ {
 public:
  inline DistanceBetweenStops() : DistanceBetweenStops(nullptr) {}
  ~DistanceBetweenStops() override;
  explicit PROTOBUF_CONSTEXPR DistanceBetweenStops(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DistanceBetweenStops(const DistanceBetweenStops& from);
  DistanceBetweenStops(DistanceBetweenStops&& from) noexcept
    : DistanceBetweenStops() {
    *this = ::std::move(from);
  }

  inline DistanceBetweenStops& operator=(const DistanceBetweenStops& from) {
    CopyFrom(from);
    return *this;
  }
  inline DistanceBetweenStops& operator=(DistanceBetweenStops&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DistanceBetweenStops& default_instance() {
    return *internal_default_instance();
  }
  static inline const DistanceBetweenStops* internal_default_instance() {
    return reinterpret_cast<const DistanceBetweenStops*>(
               &_DistanceBetweenStops_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DistanceBetweenStops& a, DistanceBetweenStops& b) {
    a.Swap(&b);
  }
  inline void Swap(DistanceBetweenStops* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DistanceBetweenStops* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DistanceBetweenStops* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DistanceBetweenStops>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DistanceBetweenStops& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DistanceBetweenStops& from) {
    DistanceBetweenStops::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DistanceBetweenStops* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransportCataloguePB.DistanceBetweenStops";
  }
  protected:
  explicit DistanceBetweenStops(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStop1IdFieldNumber = 1,
    kStop2IdFieldNumber = 2,
    kDistanceFieldNumber = 3,
  };
  // uint32 stop1_id = 1;
  void clear_stop1_id();
  uint32_t stop1_id() const;
  void set_stop1_id(uint32_t value);
  private:
  uint32_t _internal_stop1_id() const;
  void _internal_set_stop1_id(uint32_t value);
  public:

  // uint32 stop2_id = 2;
  void clear_stop2_id();
  uint32_t stop2_id() const;
  void set_stop2_id(uint32_t value);
  private:
  uint32_t _internal_stop2_id() const;
  void _internal_set_stop2_id(uint32_t value);
  public:

  // uint32 distance = 3;
  void clear_distance();
  uint32_t distance() const;
  void set_distance(uint32_t value);
  private:
  uint32_t _internal_distance() const;
  void _internal_set_distance(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TransportCataloguePB.DistanceBetweenStops)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t stop1_id_;
    uint32_t stop2_id_;
    uint32_t distance_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class TransportCatalogue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransportCataloguePB.TransportCatalogue) */ {
 public:
  inline TransportCatalogue() : TransportCatalogue(nullptr) {}
  ~TransportCatalogue() override;
  explicit PROTOBUF_CONSTEXPR TransportCatalogue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransportCatalogue(const TransportCatalogue& from);
  TransportCatalogue(TransportCatalogue&& from) noexcept
    : TransportCatalogue() {
    *this = ::std::move(from);
  }

  inline TransportCatalogue& operator=(const TransportCatalogue& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransportCatalogue& operator=(TransportCatalogue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransportCatalogue& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransportCatalogue* internal_default_instance() {
    return reinterpret_cast<const TransportCatalogue*>(
               &_TransportCatalogue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TransportCatalogue& a, TransportCatalogue& b) {
    a.Swap(&b);
  }
  inline void Swap(TransportCatalogue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransportCatalogue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransportCatalogue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransportCatalogue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransportCatalogue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransportCatalogue& from) {
    TransportCatalogue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransportCatalogue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransportCataloguePB.TransportCatalogue";
  }
  protected:
  explicit TransportCatalogue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopsFieldNumber = 1,
    kBusesFieldNumber = 2,
    kDistancesBetweenStopsFieldNumber = 3,
  };
  // repeated .TransportCataloguePB.Stop stops = 1;
  int stops_size() const;
  private:
  int _internal_stops_size() const;
  public:
  void clear_stops();
  ::TransportCataloguePB::Stop* mutable_stops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransportCataloguePB::Stop >*
      mutable_stops();
  private:
  const ::TransportCataloguePB::Stop& _internal_stops(int index) const;
  ::TransportCataloguePB::Stop* _internal_add_stops();
  public:
  const ::TransportCataloguePB::Stop& stops(int index) const;
  ::TransportCataloguePB::Stop* add_stops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransportCataloguePB::Stop >&
      stops() const;

  // repeated .TransportCataloguePB.Bus buses = 2;
  int buses_size() const;
  private:
  int _internal_buses_size() const;
  public:
  void clear_buses();
  ::TransportCataloguePB::Bus* mutable_buses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransportCataloguePB::Bus >*
      mutable_buses();
  private:
  const ::TransportCataloguePB::Bus& _internal_buses(int index) const;
  ::TransportCataloguePB::Bus* _internal_add_buses();
  public:
  const ::TransportCataloguePB::Bus& buses(int index) const;
  ::TransportCataloguePB::Bus* add_buses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransportCataloguePB::Bus >&
      buses() const;

  // repeated .TransportCataloguePB.DistanceBetweenStops distances_between_stops = 3;
  int distances_between_stops_size() const;
  private:
  int _internal_distances_between_stops_size() const;
  public:
  void clear_distances_between_stops();
  ::TransportCataloguePB::DistanceBetweenStops* mutable_distances_between_stops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransportCataloguePB::DistanceBetweenStops >*
      mutable_distances_between_stops();
  private:
  const ::TransportCataloguePB::DistanceBetweenStops& _internal_distances_between_stops(int index) const;
  ::TransportCataloguePB::DistanceBetweenStops* _internal_add_distances_between_stops();
  public:
  const ::TransportCataloguePB::DistanceBetweenStops& distances_between_stops(int index) const;
  ::TransportCataloguePB::DistanceBetweenStops* add_distances_between_stops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransportCataloguePB::DistanceBetweenStops >&
      distances_between_stops() const;

  // @@protoc_insertion_point(class_scope:TransportCataloguePB.TransportCatalogue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransportCataloguePB::Stop > stops_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransportCataloguePB::Bus > buses_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransportCataloguePB::DistanceBetweenStops > distances_between_stops_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Point final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransportCataloguePB.Point) */ {
 public:
  inline Point() : Point(nullptr) {}
  ~Point() override;
  explicit PROTOBUF_CONSTEXPR Point(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Point& default_instance() {
    return *internal_default_instance();
  }
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Point& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Point& from) {
    Point::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransportCataloguePB.Point";
  }
  protected:
  explicit Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // @@protoc_insertion_point(class_scope:TransportCataloguePB.Point)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double x_;
    double y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Color final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransportCataloguePB.Color) */ {
 public:
  inline Color() : Color(nullptr) {}
  ~Color() override;
  explicit PROTOBUF_CONSTEXPR Color(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Color(const Color& from);
  Color(Color&& from) noexcept
    : Color() {
    *this = ::std::move(from);
  }

  inline Color& operator=(const Color& from) {
    CopyFrom(from);
    return *this;
  }
  inline Color& operator=(Color&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Color& default_instance() {
    return *internal_default_instance();
  }
  static inline const Color* internal_default_instance() {
    return reinterpret_cast<const Color*>(
               &_Color_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Color& a, Color& b) {
    a.Swap(&b);
  }
  inline void Swap(Color* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Color* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Color* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Color>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Color& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Color& from) {
    Color::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Color* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransportCataloguePB.Color";
  }
  protected:
  explicit Color(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
    kRFieldNumber = 2,
    kGFieldNumber = 3,
    kAFieldNumber = 5,
    kBFieldNumber = 4,
  };
  // string text = 1;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // uint32 r = 2;
  void clear_r();
  uint32_t r() const;
  void set_r(uint32_t value);
  private:
  uint32_t _internal_r() const;
  void _internal_set_r(uint32_t value);
  public:

  // uint32 g = 3;
  void clear_g();
  uint32_t g() const;
  void set_g(uint32_t value);
  private:
  uint32_t _internal_g() const;
  void _internal_set_g(uint32_t value);
  public:

  // double a = 5;
  void clear_a();
  double a() const;
  void set_a(double value);
  private:
  double _internal_a() const;
  void _internal_set_a(double value);
  public:

  // uint32 b = 4;
  void clear_b();
  uint32_t b() const;
  void set_b(uint32_t value);
  private:
  uint32_t _internal_b() const;
  void _internal_set_b(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TransportCataloguePB.Color)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    uint32_t r_;
    uint32_t g_;
    double a_;
    uint32_t b_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class RenderSettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransportCataloguePB.RenderSettings) */ {
 public:
  inline RenderSettings() : RenderSettings(nullptr) {}
  ~RenderSettings() override;
  explicit PROTOBUF_CONSTEXPR RenderSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RenderSettings(const RenderSettings& from);
  RenderSettings(RenderSettings&& from) noexcept
    : RenderSettings() {
    *this = ::std::move(from);
  }

  inline RenderSettings& operator=(const RenderSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline RenderSettings& operator=(RenderSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RenderSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const RenderSettings* internal_default_instance() {
    return reinterpret_cast<const RenderSettings*>(
               &_RenderSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RenderSettings& a, RenderSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(RenderSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RenderSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RenderSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RenderSettings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RenderSettings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RenderSettings& from) {
    RenderSettings::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RenderSettings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransportCataloguePB.RenderSettings";
  }
  protected:
  explicit RenderSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorPaletteFieldNumber = 12,
    kBusLabelOffsetFieldNumber = 7,
    kStopLabelOffsetFieldNumber = 9,
    kUnderlayerColorFieldNumber = 10,
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
    kPaddingFieldNumber = 3,
    kLineWidthFieldNumber = 4,
    kStopRadiusFieldNumber = 5,
    kBusLabelFontSizeFieldNumber = 6,
    kStopLabelFontSizeFieldNumber = 8,
    kUnderlayerWidthFieldNumber = 11,
  };
  // repeated .TransportCataloguePB.Color color_palette = 12;
  int color_palette_size() const;
  private:
  int _internal_color_palette_size() const;
  public:
  void clear_color_palette();
  ::TransportCataloguePB::Color* mutable_color_palette(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransportCataloguePB::Color >*
      mutable_color_palette();
  private:
  const ::TransportCataloguePB::Color& _internal_color_palette(int index) const;
  ::TransportCataloguePB::Color* _internal_add_color_palette();
  public:
  const ::TransportCataloguePB::Color& color_palette(int index) const;
  ::TransportCataloguePB::Color* add_color_palette();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransportCataloguePB::Color >&
      color_palette() const;

  // .TransportCataloguePB.Point bus_label_offset = 7;
  bool has_bus_label_offset() const;
  private:
  bool _internal_has_bus_label_offset() const;
  public:
  void clear_bus_label_offset();
  const ::TransportCataloguePB::Point& bus_label_offset() const;
  PROTOBUF_NODISCARD ::TransportCataloguePB::Point* release_bus_label_offset();
  ::TransportCataloguePB::Point* mutable_bus_label_offset();
  void set_allocated_bus_label_offset(::TransportCataloguePB::Point* bus_label_offset);
  private:
  const ::TransportCataloguePB::Point& _internal_bus_label_offset() const;
  ::TransportCataloguePB::Point* _internal_mutable_bus_label_offset();
  public:
  void unsafe_arena_set_allocated_bus_label_offset(
      ::TransportCataloguePB::Point* bus_label_offset);
  ::TransportCataloguePB::Point* unsafe_arena_release_bus_label_offset();

  // .TransportCataloguePB.Point stop_label_offset = 9;
  bool has_stop_label_offset() const;
  private:
  bool _internal_has_stop_label_offset() const;
  public:
  void clear_stop_label_offset();
  const ::TransportCataloguePB::Point& stop_label_offset() const;
  PROTOBUF_NODISCARD ::TransportCataloguePB::Point* release_stop_label_offset();
  ::TransportCataloguePB::Point* mutable_stop_label_offset();
  void set_allocated_stop_label_offset(::TransportCataloguePB::Point* stop_label_offset);
  private:
  const ::TransportCataloguePB::Point& _internal_stop_label_offset() const;
  ::TransportCataloguePB::Point* _internal_mutable_stop_label_offset();
  public:
  void unsafe_arena_set_allocated_stop_label_offset(
      ::TransportCataloguePB::Point* stop_label_offset);
  ::TransportCataloguePB::Point* unsafe_arena_release_stop_label_offset();

  // .TransportCataloguePB.Color underlayer_color = 10;
  bool has_underlayer_color() const;
  private:
  bool _internal_has_underlayer_color() const;
  public:
  void clear_underlayer_color();
  const ::TransportCataloguePB::Color& underlayer_color() const;
  PROTOBUF_NODISCARD ::TransportCataloguePB::Color* release_underlayer_color();
  ::TransportCataloguePB::Color* mutable_underlayer_color();
  void set_allocated_underlayer_color(::TransportCataloguePB::Color* underlayer_color);
  private:
  const ::TransportCataloguePB::Color& _internal_underlayer_color() const;
  ::TransportCataloguePB::Color* _internal_mutable_underlayer_color();
  public:
  void unsafe_arena_set_allocated_underlayer_color(
      ::TransportCataloguePB::Color* underlayer_color);
  ::TransportCataloguePB::Color* unsafe_arena_release_underlayer_color();

  // double width = 1;
  void clear_width();
  double width() const;
  void set_width(double value);
  private:
  double _internal_width() const;
  void _internal_set_width(double value);
  public:

  // double height = 2;
  void clear_height();
  double height() const;
  void set_height(double value);
  private:
  double _internal_height() const;
  void _internal_set_height(double value);
  public:

  // double padding = 3;
  void clear_padding();
  double padding() const;
  void set_padding(double value);
  private:
  double _internal_padding() const;
  void _internal_set_padding(double value);
  public:

  // double line_width = 4;
  void clear_line_width();
  double line_width() const;
  void set_line_width(double value);
  private:
  double _internal_line_width() const;
  void _internal_set_line_width(double value);
  public:

  // double stop_radius = 5;
  void clear_stop_radius();
  double stop_radius() const;
  void set_stop_radius(double value);
  private:
  double _internal_stop_radius() const;
  void _internal_set_stop_radius(double value);
  public:

  // uint32 bus_label_font_size = 6;
  void clear_bus_label_font_size();
  uint32_t bus_label_font_size() const;
  void set_bus_label_font_size(uint32_t value);
  private:
  uint32_t _internal_bus_label_font_size() const;
  void _internal_set_bus_label_font_size(uint32_t value);
  public:

  // uint32 stop_label_font_size = 8;
  void clear_stop_label_font_size();
  uint32_t stop_label_font_size() const;
  void set_stop_label_font_size(uint32_t value);
  private:
  uint32_t _internal_stop_label_font_size() const;
  void _internal_set_stop_label_font_size(uint32_t value);
  public:

  // double underlayer_width = 11;
  void clear_underlayer_width();
  double underlayer_width() const;
  void set_underlayer_width(double value);
  private:
  double _internal_underlayer_width() const;
  void _internal_set_underlayer_width(double value);
  public:

  // @@protoc_insertion_point(class_scope:TransportCataloguePB.RenderSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransportCataloguePB::Color > color_palette_;
    ::TransportCataloguePB::Point* bus_label_offset_;
    ::TransportCataloguePB::Point* stop_label_offset_;
    ::TransportCataloguePB::Color* underlayer_color_;
    double width_;
    double height_;
    double padding_;
    double line_width_;
    double stop_radius_;
    uint32_t bus_label_font_size_;
    uint32_t stop_label_font_size_;
    double underlayer_width_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class RoutingSettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransportCataloguePB.RoutingSettings) */ {
 public:
  inline RoutingSettings() : RoutingSettings(nullptr) {}
  ~RoutingSettings() override;
  explicit PROTOBUF_CONSTEXPR RoutingSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoutingSettings(const RoutingSettings& from);
  RoutingSettings(RoutingSettings&& from) noexcept
    : RoutingSettings() {
    *this = ::std::move(from);
  }

  inline RoutingSettings& operator=(const RoutingSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoutingSettings& operator=(RoutingSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoutingSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoutingSettings* internal_default_instance() {
    return reinterpret_cast<const RoutingSettings*>(
               &_RoutingSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RoutingSettings& a, RoutingSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(RoutingSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoutingSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoutingSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoutingSettings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoutingSettings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoutingSettings& from) {
    RoutingSettings::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoutingSettings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransportCataloguePB.RoutingSettings";
  }
  protected:
  explicit RoutingSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusWaitTimeFieldNumber = 1,
    kBusVelocityFieldNumber = 2,
  };
  // double bus_wait_time = 1;
  void clear_bus_wait_time();
  double bus_wait_time() const;
  void set_bus_wait_time(double value);
  private:
  double _internal_bus_wait_time() const;
  void _internal_set_bus_wait_time(double value);
  public:

  // double bus_velocity = 2;
  void clear_bus_velocity();
  double bus_velocity() const;
  void set_bus_velocity(double value);
  private:
  double _internal_bus_velocity() const;
  void _internal_set_bus_velocity(double value);
  public:

  // @@protoc_insertion_point(class_scope:TransportCataloguePB.RoutingSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double bus_wait_time_;
    double bus_velocity_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class AllInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransportCataloguePB.AllInfo) */ {
 public:
  inline AllInfo() : AllInfo(nullptr) {}
  ~AllInfo() override;
  explicit PROTOBUF_CONSTEXPR AllInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AllInfo(const AllInfo& from);
  AllInfo(AllInfo&& from) noexcept
    : AllInfo() {
    *this = ::std::move(from);
  }

  inline AllInfo& operator=(const AllInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllInfo& operator=(AllInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AllInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const AllInfo* internal_default_instance() {
    return reinterpret_cast<const AllInfo*>(
               &_AllInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(AllInfo& a, AllInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AllInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AllInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AllInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AllInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AllInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AllInfo& from) {
    AllInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransportCataloguePB.AllInfo";
  }
  protected:
  explicit AllInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCatalogueFieldNumber = 1,
    kRenderSettingsFieldNumber = 2,
    kRoutingSettingsFieldNumber = 3,
  };
  // .TransportCataloguePB.TransportCatalogue catalogue = 1;
  bool has_catalogue() const;
  private:
  bool _internal_has_catalogue() const;
  public:
  void clear_catalogue();
  const ::TransportCataloguePB::TransportCatalogue& catalogue() const;
  PROTOBUF_NODISCARD ::TransportCataloguePB::TransportCatalogue* release_catalogue();
  ::TransportCataloguePB::TransportCatalogue* mutable_catalogue();
  void set_allocated_catalogue(::TransportCataloguePB::TransportCatalogue* catalogue);
  private:
  const ::TransportCataloguePB::TransportCatalogue& _internal_catalogue() const;
  ::TransportCataloguePB::TransportCatalogue* _internal_mutable_catalogue();
  public:
  void unsafe_arena_set_allocated_catalogue(
      ::TransportCataloguePB::TransportCatalogue* catalogue);
  ::TransportCataloguePB::TransportCatalogue* unsafe_arena_release_catalogue();

  // .TransportCataloguePB.RenderSettings render_settings = 2;
  bool has_render_settings() const;
  private:
  bool _internal_has_render_settings() const;
  public:
  void clear_render_settings();
  const ::TransportCataloguePB::RenderSettings& render_settings() const;
  PROTOBUF_NODISCARD ::TransportCataloguePB::RenderSettings* release_render_settings();
  ::TransportCataloguePB::RenderSettings* mutable_render_settings();
  void set_allocated_render_settings(::TransportCataloguePB::RenderSettings* render_settings);
  private:
  const ::TransportCataloguePB::RenderSettings& _internal_render_settings() const;
  ::TransportCataloguePB::RenderSettings* _internal_mutable_render_settings();
  public:
  void unsafe_arena_set_allocated_render_settings(
      ::TransportCataloguePB::RenderSettings* render_settings);
  ::TransportCataloguePB::RenderSettings* unsafe_arena_release_render_settings();

  // .TransportCataloguePB.RoutingSettings routing_settings = 3;
  bool has_routing_settings() const;
  private:
  bool _internal_has_routing_settings() const;
  public:
  void clear_routing_settings();
  const ::TransportCataloguePB::RoutingSettings& routing_settings() const;
  PROTOBUF_NODISCARD ::TransportCataloguePB::RoutingSettings* release_routing_settings();
  ::TransportCataloguePB::RoutingSettings* mutable_routing_settings();
  void set_allocated_routing_settings(::TransportCataloguePB::RoutingSettings* routing_settings);
  private:
  const ::TransportCataloguePB::RoutingSettings& _internal_routing_settings() const;
  ::TransportCataloguePB::RoutingSettings* _internal_mutable_routing_settings();
  public:
  void unsafe_arena_set_allocated_routing_settings(
      ::TransportCataloguePB::RoutingSettings* routing_settings);
  ::TransportCataloguePB::RoutingSettings* unsafe_arena_release_routing_settings();

  // @@protoc_insertion_point(class_scope:TransportCataloguePB.AllInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::TransportCataloguePB::TransportCatalogue* catalogue_;
    ::TransportCataloguePB::RenderSettings* render_settings_;
    ::TransportCataloguePB::RoutingSettings* routing_settings_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Coordinates

// double lat = 1;
inline void Coordinates::clear_lat() {
  _impl_.lat_ = 0;
}
inline double Coordinates::_internal_lat() const {
  return _impl_.lat_;
}
inline double Coordinates::lat() const {
  // @@protoc_insertion_point(field_get:TransportCataloguePB.Coordinates.lat)
  return _internal_lat();
}
inline void Coordinates::_internal_set_lat(double value) {
  
  _impl_.lat_ = value;
}
inline void Coordinates::set_lat(double value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:TransportCataloguePB.Coordinates.lat)
}

// double lng = 2;
inline void Coordinates::clear_lng() {
  _impl_.lng_ = 0;
}
inline double Coordinates::_internal_lng() const {
  return _impl_.lng_;
}
inline double Coordinates::lng() const {
  // @@protoc_insertion_point(field_get:TransportCataloguePB.Coordinates.lng)
  return _internal_lng();
}
inline void Coordinates::_internal_set_lng(double value) {
  
  _impl_.lng_ = value;
}
inline void Coordinates::set_lng(double value) {
  _internal_set_lng(value);
  // @@protoc_insertion_point(field_set:TransportCataloguePB.Coordinates.lng)
}

// -------------------------------------------------------------------

// Stop

// string name = 1;
inline void Stop::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Stop::name() const {
  // @@protoc_insertion_point(field_get:TransportCataloguePB.Stop.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Stop::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TransportCataloguePB.Stop.name)
}
inline std::string* Stop::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:TransportCataloguePB.Stop.name)
  return _s;
}
inline const std::string& Stop::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Stop::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Stop::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Stop::release_name() {
  // @@protoc_insertion_point(field_release:TransportCataloguePB.Stop.name)
  return _impl_.name_.Release();
}
inline void Stop::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TransportCataloguePB.Stop.name)
}

// .TransportCataloguePB.Coordinates coordinates = 2;
inline bool Stop::_internal_has_coordinates() const {
  return this != internal_default_instance() && _impl_.coordinates_ != nullptr;
}
inline bool Stop::has_coordinates() const {
  return _internal_has_coordinates();
}
inline void Stop::clear_coordinates() {
  if (GetArenaForAllocation() == nullptr && _impl_.coordinates_ != nullptr) {
    delete _impl_.coordinates_;
  }
  _impl_.coordinates_ = nullptr;
}
inline const ::TransportCataloguePB::Coordinates& Stop::_internal_coordinates() const {
  const ::TransportCataloguePB::Coordinates* p = _impl_.coordinates_;
  return p != nullptr ? *p : reinterpret_cast<const ::TransportCataloguePB::Coordinates&>(
      ::TransportCataloguePB::_Coordinates_default_instance_);
}
inline const ::TransportCataloguePB::Coordinates& Stop::coordinates() const {
  // @@protoc_insertion_point(field_get:TransportCataloguePB.Stop.coordinates)
  return _internal_coordinates();
}
inline void Stop::unsafe_arena_set_allocated_coordinates(
    ::TransportCataloguePB::Coordinates* coordinates) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.coordinates_);
  }
  _impl_.coordinates_ = coordinates;
  if (coordinates) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TransportCataloguePB.Stop.coordinates)
}
inline ::TransportCataloguePB::Coordinates* Stop::release_coordinates() {
  
  ::TransportCataloguePB::Coordinates* temp = _impl_.coordinates_;
  _impl_.coordinates_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TransportCataloguePB::Coordinates* Stop::unsafe_arena_release_coordinates() {
  // @@protoc_insertion_point(field_release:TransportCataloguePB.Stop.coordinates)
  
  ::TransportCataloguePB::Coordinates* temp = _impl_.coordinates_;
  _impl_.coordinates_ = nullptr;
  return temp;
}
inline ::TransportCataloguePB::Coordinates* Stop::_internal_mutable_coordinates() {
  
  if (_impl_.coordinates_ == nullptr) {
    auto* p = CreateMaybeMessage<::TransportCataloguePB::Coordinates>(GetArenaForAllocation());
    _impl_.coordinates_ = p;
  }
  return _impl_.coordinates_;
}
inline ::TransportCataloguePB::Coordinates* Stop::mutable_coordinates() {
  ::TransportCataloguePB::Coordinates* _msg = _internal_mutable_coordinates();
  // @@protoc_insertion_point(field_mutable:TransportCataloguePB.Stop.coordinates)
  return _msg;
}
inline void Stop::set_allocated_coordinates(::TransportCataloguePB::Coordinates* coordinates) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.coordinates_;
  }
  if (coordinates) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(coordinates);
    if (message_arena != submessage_arena) {
      coordinates = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coordinates, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.coordinates_ = coordinates;
  // @@protoc_insertion_point(field_set_allocated:TransportCataloguePB.Stop.coordinates)
}

// uint32 vertex_id = 3;
inline void Stop::clear_vertex_id() {
  _impl_.vertex_id_ = 0u;
}
inline uint32_t Stop::_internal_vertex_id() const {
  return _impl_.vertex_id_;
}
inline uint32_t Stop::vertex_id() const {
  // @@protoc_insertion_point(field_get:TransportCataloguePB.Stop.vertex_id)
  return _internal_vertex_id();
}
inline void Stop::_internal_set_vertex_id(uint32_t value) {
  
  _impl_.vertex_id_ = value;
}
inline void Stop::set_vertex_id(uint32_t value) {
  _internal_set_vertex_id(value);
  // @@protoc_insertion_point(field_set:TransportCataloguePB.Stop.vertex_id)
}

// -------------------------------------------------------------------

// Bus

// string name = 1;
inline void Bus::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Bus::name() const {
  // @@protoc_insertion_point(field_get:TransportCataloguePB.Bus.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Bus::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TransportCataloguePB.Bus.name)
}
inline std::string* Bus::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:TransportCataloguePB.Bus.name)
  return _s;
}
inline const std::string& Bus::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Bus::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Bus::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Bus::release_name() {
  // @@protoc_insertion_point(field_release:TransportCataloguePB.Bus.name)
  return _impl_.name_.Release();
}
inline void Bus::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TransportCataloguePB.Bus.name)
}

// repeated uint32 stop_id_pb_array = 2;
inline int Bus::_internal_stop_id_pb_array_size() const {
  return _impl_.stop_id_pb_array_.size();
}
inline int Bus::stop_id_pb_array_size() const {
  return _internal_stop_id_pb_array_size();
}
inline void Bus::clear_stop_id_pb_array() {
  _impl_.stop_id_pb_array_.Clear();
}
inline uint32_t Bus::_internal_stop_id_pb_array(int index) const {
  return _impl_.stop_id_pb_array_.Get(index);
}
inline uint32_t Bus::stop_id_pb_array(int index) const {
  // @@protoc_insertion_point(field_get:TransportCataloguePB.Bus.stop_id_pb_array)
  return _internal_stop_id_pb_array(index);
}
inline void Bus::set_stop_id_pb_array(int index, uint32_t value) {
  _impl_.stop_id_pb_array_.Set(index, value);
  // @@protoc_insertion_point(field_set:TransportCataloguePB.Bus.stop_id_pb_array)
}
inline void Bus::_internal_add_stop_id_pb_array(uint32_t value) {
  _impl_.stop_id_pb_array_.Add(value);
}
inline void Bus::add_stop_id_pb_array(uint32_t value) {
  _internal_add_stop_id_pb_array(value);
  // @@protoc_insertion_point(field_add:TransportCataloguePB.Bus.stop_id_pb_array)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Bus::_internal_stop_id_pb_array() const {
  return _impl_.stop_id_pb_array_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Bus::stop_id_pb_array() const {
  // @@protoc_insertion_point(field_list:TransportCataloguePB.Bus.stop_id_pb_array)
  return _internal_stop_id_pb_array();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Bus::_internal_mutable_stop_id_pb_array() {
  return &_impl_.stop_id_pb_array_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Bus::mutable_stop_id_pb_array() {
  // @@protoc_insertion_point(field_mutable_list:TransportCataloguePB.Bus.stop_id_pb_array)
  return _internal_mutable_stop_id_pb_array();
}

// uint32 unique_stops_number = 3;
inline void Bus::clear_unique_stops_number() {
  _impl_.unique_stops_number_ = 0u;
}
inline uint32_t Bus::_internal_unique_stops_number() const {
  return _impl_.unique_stops_number_;
}
inline uint32_t Bus::unique_stops_number() const {
  // @@protoc_insertion_point(field_get:TransportCataloguePB.Bus.unique_stops_number)
  return _internal_unique_stops_number();
}
inline void Bus::_internal_set_unique_stops_number(uint32_t value) {
  
  _impl_.unique_stops_number_ = value;
}
inline void Bus::set_unique_stops_number(uint32_t value) {
  _internal_set_unique_stops_number(value);
  // @@protoc_insertion_point(field_set:TransportCataloguePB.Bus.unique_stops_number)
}

// double route_length = 4;
inline void Bus::clear_route_length() {
  _impl_.route_length_ = 0;
}
inline double Bus::_internal_route_length() const {
  return _impl_.route_length_;
}
inline double Bus::route_length() const {
  // @@protoc_insertion_point(field_get:TransportCataloguePB.Bus.route_length)
  return _internal_route_length();
}
inline void Bus::_internal_set_route_length(double value) {
  
  _impl_.route_length_ = value;
}
inline void Bus::set_route_length(double value) {
  _internal_set_route_length(value);
  // @@protoc_insertion_point(field_set:TransportCataloguePB.Bus.route_length)
}

// double curvature = 5;
inline void Bus::clear_curvature() {
  _impl_.curvature_ = 0;
}
inline double Bus::_internal_curvature() const {
  return _impl_.curvature_;
}
inline double Bus::curvature() const {
  // @@protoc_insertion_point(field_get:TransportCataloguePB.Bus.curvature)
  return _internal_curvature();
}
inline void Bus::_internal_set_curvature(double value) {
  
  _impl_.curvature_ = value;
}
inline void Bus::set_curvature(double value) {
  _internal_set_curvature(value);
  // @@protoc_insertion_point(field_set:TransportCataloguePB.Bus.curvature)
}

// bool is_roundtrip = 6;
inline void Bus::clear_is_roundtrip() {
  _impl_.is_roundtrip_ = false;
}
inline bool Bus::_internal_is_roundtrip() const {
  return _impl_.is_roundtrip_;
}
inline bool Bus::is_roundtrip() const {
  // @@protoc_insertion_point(field_get:TransportCataloguePB.Bus.is_roundtrip)
  return _internal_is_roundtrip();
}
inline void Bus::_internal_set_is_roundtrip(bool value) {
  
  _impl_.is_roundtrip_ = value;
}
inline void Bus::set_is_roundtrip(bool value) {
  _internal_set_is_roundtrip(value);
  // @@protoc_insertion_point(field_set:TransportCataloguePB.Bus.is_roundtrip)
}

// -------------------------------------------------------------------

// DistanceBetweenStops

// uint32 stop1_id = 1;
inline void DistanceBetweenStops::clear_stop1_id() {
  _impl_.stop1_id_ = 0u;
}
inline uint32_t DistanceBetweenStops::_internal_stop1_id() const {
  return _impl_.stop1_id_;
}
inline uint32_t DistanceBetweenStops::stop1_id() const {
  // @@protoc_insertion_point(field_get:TransportCataloguePB.DistanceBetweenStops.stop1_id)
  return _internal_stop1_id();
}
inline void DistanceBetweenStops::_internal_set_stop1_id(uint32_t value) {
  
  _impl_.stop1_id_ = value;
}
inline void DistanceBetweenStops::set_stop1_id(uint32_t value) {
  _internal_set_stop1_id(value);
  // @@protoc_insertion_point(field_set:TransportCataloguePB.DistanceBetweenStops.stop1_id)
}

// uint32 stop2_id = 2;
inline void DistanceBetweenStops::clear_stop2_id() {
  _impl_.stop2_id_ = 0u;
}
inline uint32_t DistanceBetweenStops::_internal_stop2_id() const {
  return _impl_.stop2_id_;
}
inline uint32_t DistanceBetweenStops::stop2_id() const {
  // @@protoc_insertion_point(field_get:TransportCataloguePB.DistanceBetweenStops.stop2_id)
  return _internal_stop2_id();
}
inline void DistanceBetweenStops::_internal_set_stop2_id(uint32_t value) {
  
  _impl_.stop2_id_ = value;
}
inline void DistanceBetweenStops::set_stop2_id(uint32_t value) {
  _internal_set_stop2_id(value);
  // @@protoc_insertion_point(field_set:TransportCataloguePB.DistanceBetweenStops.stop2_id)
}

// uint32 distance = 3;
inline void DistanceBetweenStops::clear_distance() {
  _impl_.distance_ = 0u;
}
inline uint32_t DistanceBetweenStops::_internal_distance() const {
  return _impl_.distance_;
}
inline uint32_t DistanceBetweenStops::distance() const {
  // @@protoc_insertion_point(field_get:TransportCataloguePB.DistanceBetweenStops.distance)
  return _internal_distance();
}
inline void DistanceBetweenStops::_internal_set_distance(uint32_t value) {
  
  _impl_.distance_ = value;
}
inline void DistanceBetweenStops::set_distance(uint32_t value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:TransportCataloguePB.DistanceBetweenStops.distance)
}

// -------------------------------------------------------------------

// TransportCatalogue

// repeated .TransportCataloguePB.Stop stops = 1;
inline int TransportCatalogue::_internal_stops_size() const {
  return _impl_.stops_.size();
}
inline int TransportCatalogue::stops_size() const {
  return _internal_stops_size();
}
inline void TransportCatalogue::clear_stops() {
  _impl_.stops_.Clear();
}
inline ::TransportCataloguePB::Stop* TransportCatalogue::mutable_stops(int index) {
  // @@protoc_insertion_point(field_mutable:TransportCataloguePB.TransportCatalogue.stops)
  return _impl_.stops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransportCataloguePB::Stop >*
TransportCatalogue::mutable_stops() {
  // @@protoc_insertion_point(field_mutable_list:TransportCataloguePB.TransportCatalogue.stops)
  return &_impl_.stops_;
}
inline const ::TransportCataloguePB::Stop& TransportCatalogue::_internal_stops(int index) const {
  return _impl_.stops_.Get(index);
}
inline const ::TransportCataloguePB::Stop& TransportCatalogue::stops(int index) const {
  // @@protoc_insertion_point(field_get:TransportCataloguePB.TransportCatalogue.stops)
  return _internal_stops(index);
}
inline ::TransportCataloguePB::Stop* TransportCatalogue::_internal_add_stops() {
  return _impl_.stops_.Add();
}
inline ::TransportCataloguePB::Stop* TransportCatalogue::add_stops() {
  ::TransportCataloguePB::Stop* _add = _internal_add_stops();
  // @@protoc_insertion_point(field_add:TransportCataloguePB.TransportCatalogue.stops)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransportCataloguePB::Stop >&
TransportCatalogue::stops() const {
  // @@protoc_insertion_point(field_list:TransportCataloguePB.TransportCatalogue.stops)
  return _impl_.stops_;
}

// repeated .TransportCataloguePB.Bus buses = 2;
inline int TransportCatalogue::_internal_buses_size() const {
  return _impl_.buses_.size();
}
inline int TransportCatalogue::buses_size() const {
  return _internal_buses_size();
}
inline void TransportCatalogue::clear_buses() {
  _impl_.buses_.Clear();
}
inline ::TransportCataloguePB::Bus* TransportCatalogue::mutable_buses(int index) {
  // @@protoc_insertion_point(field_mutable:TransportCataloguePB.TransportCatalogue.buses)
  return _impl_.buses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransportCataloguePB::Bus >*
TransportCatalogue::mutable_buses() {
  // @@protoc_insertion_point(field_mutable_list:TransportCataloguePB.TransportCatalogue.buses)
  return &_impl_.buses_;
}
inline const ::TransportCataloguePB::Bus& TransportCatalogue::_internal_buses(int index) const {
  return _impl_.buses_.Get(index);
}
inline const ::TransportCataloguePB::Bus& TransportCatalogue::buses(int index) const {
  // @@protoc_insertion_point(field_get:TransportCataloguePB.TransportCatalogue.buses)
  return _internal_buses(index);
}
inline ::TransportCataloguePB::Bus* TransportCatalogue::_internal_add_buses() {
  return _impl_.buses_.Add();
}
inline ::TransportCataloguePB::Bus* TransportCatalogue::add_buses() {
  ::TransportCataloguePB::Bus* _add = _internal_add_buses();
  // @@protoc_insertion_point(field_add:TransportCataloguePB.TransportCatalogue.buses)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransportCataloguePB::Bus >&
TransportCatalogue::buses() const {
  // @@protoc_insertion_point(field_list:TransportCataloguePB.TransportCatalogue.buses)
  return _impl_.buses_;
}

// repeated .TransportCataloguePB.DistanceBetweenStops distances_between_stops = 3;
inline int TransportCatalogue::_internal_distances_between_stops_size() const {
  return _impl_.distances_between_stops_.size();
}
inline int TransportCatalogue::distances_between_stops_size() const {
  return _internal_distances_between_stops_size();
}
inline void TransportCatalogue::clear_distances_between_stops() {
  _impl_.distances_between_stops_.Clear();
}
inline ::TransportCataloguePB::DistanceBetweenStops* TransportCatalogue::mutable_distances_between_stops(int index) {
  // @@protoc_insertion_point(field_mutable:TransportCataloguePB.TransportCatalogue.distances_between_stops)
  return _impl_.distances_between_stops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransportCataloguePB::DistanceBetweenStops >*
TransportCatalogue::mutable_distances_between_stops() {
  // @@protoc_insertion_point(field_mutable_list:TransportCataloguePB.TransportCatalogue.distances_between_stops)
  return &_impl_.distances_between_stops_;
}
inline const ::TransportCataloguePB::DistanceBetweenStops& TransportCatalogue::_internal_distances_between_stops(int index) const {
  return _impl_.distances_between_stops_.Get(index);
}
inline const ::TransportCataloguePB::DistanceBetweenStops& TransportCatalogue::distances_between_stops(int index) const {
  // @@protoc_insertion_point(field_get:TransportCataloguePB.TransportCatalogue.distances_between_stops)
  return _internal_distances_between_stops(index);
}
inline ::TransportCataloguePB::DistanceBetweenStops* TransportCatalogue::_internal_add_distances_between_stops() {
  return _impl_.distances_between_stops_.Add();
}
inline ::TransportCataloguePB::DistanceBetweenStops* TransportCatalogue::add_distances_between_stops() {
  ::TransportCataloguePB::DistanceBetweenStops* _add = _internal_add_distances_between_stops();
  // @@protoc_insertion_point(field_add:TransportCataloguePB.TransportCatalogue.distances_between_stops)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransportCataloguePB::DistanceBetweenStops >&
TransportCatalogue::distances_between_stops() const {
  // @@protoc_insertion_point(field_list:TransportCataloguePB.TransportCatalogue.distances_between_stops)
  return _impl_.distances_between_stops_;
}

// -------------------------------------------------------------------

// Point

// double x = 1;
inline void Point::clear_x() {
  _impl_.x_ = 0;
}
inline double Point::_internal_x() const {
  return _impl_.x_;
}
inline double Point::x() const {
  // @@protoc_insertion_point(field_get:TransportCataloguePB.Point.x)
  return _internal_x();
}
inline void Point::_internal_set_x(double value) {
  
  _impl_.x_ = value;
}
inline void Point::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:TransportCataloguePB.Point.x)
}

// double y = 2;
inline void Point::clear_y() {
  _impl_.y_ = 0;
}
inline double Point::_internal_y() const {
  return _impl_.y_;
}
inline double Point::y() const {
  // @@protoc_insertion_point(field_get:TransportCataloguePB.Point.y)
  return _internal_y();
}
inline void Point::_internal_set_y(double value) {
  
  _impl_.y_ = value;
}
inline void Point::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:TransportCataloguePB.Point.y)
}

// -------------------------------------------------------------------

// Color

// string text = 1;
inline void Color::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& Color::text() const {
  // @@protoc_insertion_point(field_get:TransportCataloguePB.Color.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Color::set_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TransportCataloguePB.Color.text)
}
inline std::string* Color::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:TransportCataloguePB.Color.text)
  return _s;
}
inline const std::string& Color::_internal_text() const {
  return _impl_.text_.Get();
}
inline void Color::_internal_set_text(const std::string& value) {
  
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* Color::_internal_mutable_text() {
  
  return _impl_.text_.Mutable(GetArenaForAllocation());
}
inline std::string* Color::release_text() {
  // @@protoc_insertion_point(field_release:TransportCataloguePB.Color.text)
  return _impl_.text_.Release();
}
inline void Color::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  _impl_.text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TransportCataloguePB.Color.text)
}

// uint32 r = 2;
inline void Color::clear_r() {
  _impl_.r_ = 0u;
}
inline uint32_t Color::_internal_r() const {
  return _impl_.r_;
}
inline uint32_t Color::r() const {
  // @@protoc_insertion_point(field_get:TransportCataloguePB.Color.r)
  return _internal_r();
}
inline void Color::_internal_set_r(uint32_t value) {
  
  _impl_.r_ = value;
}
inline void Color::set_r(uint32_t value) {
  _internal_set_r(value);
  // @@protoc_insertion_point(field_set:TransportCataloguePB.Color.r)
}

// uint32 g = 3;
inline void Color::clear_g() {
  _impl_.g_ = 0u;
}
inline uint32_t Color::_internal_g() const {
  return _impl_.g_;
}
inline uint32_t Color::g() const {
  // @@protoc_insertion_point(field_get:TransportCataloguePB.Color.g)
  return _internal_g();
}
inline void Color::_internal_set_g(uint32_t value) {
  
  _impl_.g_ = value;
}
inline void Color::set_g(uint32_t value) {
  _internal_set_g(value);
  // @@protoc_insertion_point(field_set:TransportCataloguePB.Color.g)
}

// uint32 b = 4;
inline void Color::clear_b() {
  _impl_.b_ = 0u;
}
inline uint32_t Color::_internal_b() const {
  return _impl_.b_;
}
inline uint32_t Color::b() const {
  // @@protoc_insertion_point(field_get:TransportCataloguePB.Color.b)
  return _internal_b();
}
inline void Color::_internal_set_b(uint32_t value) {
  
  _impl_.b_ = value;
}
inline void Color::set_b(uint32_t value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:TransportCataloguePB.Color.b)
}

// double a = 5;
inline void Color::clear_a() {
  _impl_.a_ = 0;
}
inline double Color::_internal_a() const {
  return _impl_.a_;
}
inline double Color::a() const {
  // @@protoc_insertion_point(field_get:TransportCataloguePB.Color.a)
  return _internal_a();
}
inline void Color::_internal_set_a(double value) {
  
  _impl_.a_ = value;
}
inline void Color::set_a(double value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:TransportCataloguePB.Color.a)
}

// -------------------------------------------------------------------

// RenderSettings

// double width = 1;
inline void RenderSettings::clear_width() {
  _impl_.width_ = 0;
}
inline double RenderSettings::_internal_width() const {
  return _impl_.width_;
}
inline double RenderSettings::width() const {
  // @@protoc_insertion_point(field_get:TransportCataloguePB.RenderSettings.width)
  return _internal_width();
}
inline void RenderSettings::_internal_set_width(double value) {
  
  _impl_.width_ = value;
}
inline void RenderSettings::set_width(double value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:TransportCataloguePB.RenderSettings.width)
}

// double height = 2;
inline void RenderSettings::clear_height() {
  _impl_.height_ = 0;
}
inline double RenderSettings::_internal_height() const {
  return _impl_.height_;
}
inline double RenderSettings::height() const {
  // @@protoc_insertion_point(field_get:TransportCataloguePB.RenderSettings.height)
  return _internal_height();
}
inline void RenderSettings::_internal_set_height(double value) {
  
  _impl_.height_ = value;
}
inline void RenderSettings::set_height(double value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:TransportCataloguePB.RenderSettings.height)
}

// double padding = 3;
inline void RenderSettings::clear_padding() {
  _impl_.padding_ = 0;
}
inline double RenderSettings::_internal_padding() const {
  return _impl_.padding_;
}
inline double RenderSettings::padding() const {
  // @@protoc_insertion_point(field_get:TransportCataloguePB.RenderSettings.padding)
  return _internal_padding();
}
inline void RenderSettings::_internal_set_padding(double value) {
  
  _impl_.padding_ = value;
}
inline void RenderSettings::set_padding(double value) {
  _internal_set_padding(value);
  // @@protoc_insertion_point(field_set:TransportCataloguePB.RenderSettings.padding)
}

// double line_width = 4;
inline void RenderSettings::clear_line_width() {
  _impl_.line_width_ = 0;
}
inline double RenderSettings::_internal_line_width() const {
  return _impl_.line_width_;
}
inline double RenderSettings::line_width() const {
  // @@protoc_insertion_point(field_get:TransportCataloguePB.RenderSettings.line_width)
  return _internal_line_width();
}
inline void RenderSettings::_internal_set_line_width(double value) {
  
  _impl_.line_width_ = value;
}
inline void RenderSettings::set_line_width(double value) {
  _internal_set_line_width(value);
  // @@protoc_insertion_point(field_set:TransportCataloguePB.RenderSettings.line_width)
}

// double stop_radius = 5;
inline void RenderSettings::clear_stop_radius() {
  _impl_.stop_radius_ = 0;
}
inline double RenderSettings::_internal_stop_radius() const {
  return _impl_.stop_radius_;
}
inline double RenderSettings::stop_radius() const {
  // @@protoc_insertion_point(field_get:TransportCataloguePB.RenderSettings.stop_radius)
  return _internal_stop_radius();
}
inline void RenderSettings::_internal_set_stop_radius(double value) {
  
  _impl_.stop_radius_ = value;
}
inline void RenderSettings::set_stop_radius(double value) {
  _internal_set_stop_radius(value);
  // @@protoc_insertion_point(field_set:TransportCataloguePB.RenderSettings.stop_radius)
}

// uint32 bus_label_font_size = 6;
inline void RenderSettings::clear_bus_label_font_size() {
  _impl_.bus_label_font_size_ = 0u;
}
inline uint32_t RenderSettings::_internal_bus_label_font_size() const {
  return _impl_.bus_label_font_size_;
}
inline uint32_t RenderSettings::bus_label_font_size() const {
  // @@protoc_insertion_point(field_get:TransportCataloguePB.RenderSettings.bus_label_font_size)
  return _internal_bus_label_font_size();
}
inline void RenderSettings::_internal_set_bus_label_font_size(uint32_t value) {
  
  _impl_.bus_label_font_size_ = value;
}
inline void RenderSettings::set_bus_label_font_size(uint32_t value) {
  _internal_set_bus_label_font_size(value);
  // @@protoc_insertion_point(field_set:TransportCataloguePB.RenderSettings.bus_label_font_size)
}

// .TransportCataloguePB.Point bus_label_offset = 7;
inline bool RenderSettings::_internal_has_bus_label_offset() const {
  return this != internal_default_instance() && _impl_.bus_label_offset_ != nullptr;
}
inline bool RenderSettings::has_bus_label_offset() const {
  return _internal_has_bus_label_offset();
}
inline void RenderSettings::clear_bus_label_offset() {
  if (GetArenaForAllocation() == nullptr && _impl_.bus_label_offset_ != nullptr) {
    delete _impl_.bus_label_offset_;
  }
  _impl_.bus_label_offset_ = nullptr;
}
inline const ::TransportCataloguePB::Point& RenderSettings::_internal_bus_label_offset() const {
  const ::TransportCataloguePB::Point* p = _impl_.bus_label_offset_;
  return p != nullptr ? *p : reinterpret_cast<const ::TransportCataloguePB::Point&>(
      ::TransportCataloguePB::_Point_default_instance_);
}
inline const ::TransportCataloguePB::Point& RenderSettings::bus_label_offset() const {
  // @@protoc_insertion_point(field_get:TransportCataloguePB.RenderSettings.bus_label_offset)
  return _internal_bus_label_offset();
}
inline void RenderSettings::unsafe_arena_set_allocated_bus_label_offset(
    ::TransportCataloguePB::Point* bus_label_offset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bus_label_offset_);
  }
  _impl_.bus_label_offset_ = bus_label_offset;
  if (bus_label_offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TransportCataloguePB.RenderSettings.bus_label_offset)
}
inline ::TransportCataloguePB::Point* RenderSettings::release_bus_label_offset() {
  
  ::TransportCataloguePB::Point* temp = _impl_.bus_label_offset_;
  _impl_.bus_label_offset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TransportCataloguePB::Point* RenderSettings::unsafe_arena_release_bus_label_offset() {
  // @@protoc_insertion_point(field_release:TransportCataloguePB.RenderSettings.bus_label_offset)
  
  ::TransportCataloguePB::Point* temp = _impl_.bus_label_offset_;
  _impl_.bus_label_offset_ = nullptr;
  return temp;
}
inline ::TransportCataloguePB::Point* RenderSettings::_internal_mutable_bus_label_offset() {
  
  if (_impl_.bus_label_offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::TransportCataloguePB::Point>(GetArenaForAllocation());
    _impl_.bus_label_offset_ = p;
  }
  return _impl_.bus_label_offset_;
}
inline ::TransportCataloguePB::Point* RenderSettings::mutable_bus_label_offset() {
  ::TransportCataloguePB::Point* _msg = _internal_mutable_bus_label_offset();
  // @@protoc_insertion_point(field_mutable:TransportCataloguePB.RenderSettings.bus_label_offset)
  return _msg;
}
inline void RenderSettings::set_allocated_bus_label_offset(::TransportCataloguePB::Point* bus_label_offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.bus_label_offset_;
  }
  if (bus_label_offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bus_label_offset);
    if (message_arena != submessage_arena) {
      bus_label_offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bus_label_offset, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.bus_label_offset_ = bus_label_offset;
  // @@protoc_insertion_point(field_set_allocated:TransportCataloguePB.RenderSettings.bus_label_offset)
}

// uint32 stop_label_font_size = 8;
inline void RenderSettings::clear_stop_label_font_size() {
  _impl_.stop_label_font_size_ = 0u;
}
inline uint32_t RenderSettings::_internal_stop_label_font_size() const {
  return _impl_.stop_label_font_size_;
}
inline uint32_t RenderSettings::stop_label_font_size() const {
  // @@protoc_insertion_point(field_get:TransportCataloguePB.RenderSettings.stop_label_font_size)
  return _internal_stop_label_font_size();
}
inline void RenderSettings::_internal_set_stop_label_font_size(uint32_t value) {
  
  _impl_.stop_label_font_size_ = value;
}
inline void RenderSettings::set_stop_label_font_size(uint32_t value) {
  _internal_set_stop_label_font_size(value);
  // @@protoc_insertion_point(field_set:TransportCataloguePB.RenderSettings.stop_label_font_size)
}

// .TransportCataloguePB.Point stop_label_offset = 9;
inline bool RenderSettings::_internal_has_stop_label_offset() const {
  return this != internal_default_instance() && _impl_.stop_label_offset_ != nullptr;
}
inline bool RenderSettings::has_stop_label_offset() const {
  return _internal_has_stop_label_offset();
}
inline void RenderSettings::clear_stop_label_offset() {
  if (GetArenaForAllocation() == nullptr && _impl_.stop_label_offset_ != nullptr) {
    delete _impl_.stop_label_offset_;
  }
  _impl_.stop_label_offset_ = nullptr;
}
inline const ::TransportCataloguePB::Point& RenderSettings::_internal_stop_label_offset() const {
  const ::TransportCataloguePB::Point* p = _impl_.stop_label_offset_;
  return p != nullptr ? *p : reinterpret_cast<const ::TransportCataloguePB::Point&>(
      ::TransportCataloguePB::_Point_default_instance_);
}
inline const ::TransportCataloguePB::Point& RenderSettings::stop_label_offset() const {
  // @@protoc_insertion_point(field_get:TransportCataloguePB.RenderSettings.stop_label_offset)
  return _internal_stop_label_offset();
}
inline void RenderSettings::unsafe_arena_set_allocated_stop_label_offset(
    ::TransportCataloguePB::Point* stop_label_offset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stop_label_offset_);
  }
  _impl_.stop_label_offset_ = stop_label_offset;
  if (stop_label_offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TransportCataloguePB.RenderSettings.stop_label_offset)
}
inline ::TransportCataloguePB::Point* RenderSettings::release_stop_label_offset() {
  
  ::TransportCataloguePB::Point* temp = _impl_.stop_label_offset_;
  _impl_.stop_label_offset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TransportCataloguePB::Point* RenderSettings::unsafe_arena_release_stop_label_offset() {
  // @@protoc_insertion_point(field_release:TransportCataloguePB.RenderSettings.stop_label_offset)
  
  ::TransportCataloguePB::Point* temp = _impl_.stop_label_offset_;
  _impl_.stop_label_offset_ = nullptr;
  return temp;
}
inline ::TransportCataloguePB::Point* RenderSettings::_internal_mutable_stop_label_offset() {
  
  if (_impl_.stop_label_offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::TransportCataloguePB::Point>(GetArenaForAllocation());
    _impl_.stop_label_offset_ = p;
  }
  return _impl_.stop_label_offset_;
}
inline ::TransportCataloguePB::Point* RenderSettings::mutable_stop_label_offset() {
  ::TransportCataloguePB::Point* _msg = _internal_mutable_stop_label_offset();
  // @@protoc_insertion_point(field_mutable:TransportCataloguePB.RenderSettings.stop_label_offset)
  return _msg;
}
inline void RenderSettings::set_allocated_stop_label_offset(::TransportCataloguePB::Point* stop_label_offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.stop_label_offset_;
  }
  if (stop_label_offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stop_label_offset);
    if (message_arena != submessage_arena) {
      stop_label_offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop_label_offset, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.stop_label_offset_ = stop_label_offset;
  // @@protoc_insertion_point(field_set_allocated:TransportCataloguePB.RenderSettings.stop_label_offset)
}

// .TransportCataloguePB.Color underlayer_color = 10;
inline bool RenderSettings::_internal_has_underlayer_color() const {
  return this != internal_default_instance() && _impl_.underlayer_color_ != nullptr;
}
inline bool RenderSettings::has_underlayer_color() const {
  return _internal_has_underlayer_color();
}
inline void RenderSettings::clear_underlayer_color() {
  if (GetArenaForAllocation() == nullptr && _impl_.underlayer_color_ != nullptr) {
    delete _impl_.underlayer_color_;
  }
  _impl_.underlayer_color_ = nullptr;
}
inline const ::TransportCataloguePB::Color& RenderSettings::_internal_underlayer_color() const {
  const ::TransportCataloguePB::Color* p = _impl_.underlayer_color_;
  return p != nullptr ? *p : reinterpret_cast<const ::TransportCataloguePB::Color&>(
      ::TransportCataloguePB::_Color_default_instance_);
}
inline const ::TransportCataloguePB::Color& RenderSettings::underlayer_color() const {
  // @@protoc_insertion_point(field_get:TransportCataloguePB.RenderSettings.underlayer_color)
  return _internal_underlayer_color();
}
inline void RenderSettings::unsafe_arena_set_allocated_underlayer_color(
    ::TransportCataloguePB::Color* underlayer_color) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.underlayer_color_);
  }
  _impl_.underlayer_color_ = underlayer_color;
  if (underlayer_color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TransportCataloguePB.RenderSettings.underlayer_color)
}
inline ::TransportCataloguePB::Color* RenderSettings::release_underlayer_color() {
  
  ::TransportCataloguePB::Color* temp = _impl_.underlayer_color_;
  _impl_.underlayer_color_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TransportCataloguePB::Color* RenderSettings::unsafe_arena_release_underlayer_color() {
  // @@protoc_insertion_point(field_release:TransportCataloguePB.RenderSettings.underlayer_color)
  
  ::TransportCataloguePB::Color* temp = _impl_.underlayer_color_;
  _impl_.underlayer_color_ = nullptr;
  return temp;
}
inline ::TransportCataloguePB::Color* RenderSettings::_internal_mutable_underlayer_color() {
  
  if (_impl_.underlayer_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::TransportCataloguePB::Color>(GetArenaForAllocation());
    _impl_.underlayer_color_ = p;
  }
  return _impl_.underlayer_color_;
}
inline ::TransportCataloguePB::Color* RenderSettings::mutable_underlayer_color() {
  ::TransportCataloguePB::Color* _msg = _internal_mutable_underlayer_color();
  // @@protoc_insertion_point(field_mutable:TransportCataloguePB.RenderSettings.underlayer_color)
  return _msg;
}
inline void RenderSettings::set_allocated_underlayer_color(::TransportCataloguePB::Color* underlayer_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.underlayer_color_;
  }
  if (underlayer_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(underlayer_color);
    if (message_arena != submessage_arena) {
      underlayer_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, underlayer_color, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.underlayer_color_ = underlayer_color;
  // @@protoc_insertion_point(field_set_allocated:TransportCataloguePB.RenderSettings.underlayer_color)
}

// double underlayer_width = 11;
inline void RenderSettings::clear_underlayer_width() {
  _impl_.underlayer_width_ = 0;
}
inline double RenderSettings::_internal_underlayer_width() const {
  return _impl_.underlayer_width_;
}
inline double RenderSettings::underlayer_width() const {
  // @@protoc_insertion_point(field_get:TransportCataloguePB.RenderSettings.underlayer_width)
  return _internal_underlayer_width();
}
inline void RenderSettings::_internal_set_underlayer_width(double value) {
  
  _impl_.underlayer_width_ = value;
}
inline void RenderSettings::set_underlayer_width(double value) {
  _internal_set_underlayer_width(value);
  // @@protoc_insertion_point(field_set:TransportCataloguePB.RenderSettings.underlayer_width)
}

// repeated .TransportCataloguePB.Color color_palette = 12;
inline int RenderSettings::_internal_color_palette_size() const {
  return _impl_.color_palette_.size();
}
inline int RenderSettings::color_palette_size() const {
  return _internal_color_palette_size();
}
inline void RenderSettings::clear_color_palette() {
  _impl_.color_palette_.Clear();
}
inline ::TransportCataloguePB::Color* RenderSettings::mutable_color_palette(int index) {
  // @@protoc_insertion_point(field_mutable:TransportCataloguePB.RenderSettings.color_palette)
  return _impl_.color_palette_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransportCataloguePB::Color >*
RenderSettings::mutable_color_palette() {
  // @@protoc_insertion_point(field_mutable_list:TransportCataloguePB.RenderSettings.color_palette)
  return &_impl_.color_palette_;
}
inline const ::TransportCataloguePB::Color& RenderSettings::_internal_color_palette(int index) const {
  return _impl_.color_palette_.Get(index);
}
inline const ::TransportCataloguePB::Color& RenderSettings::color_palette(int index) const {
  // @@protoc_insertion_point(field_get:TransportCataloguePB.RenderSettings.color_palette)
  return _internal_color_palette(index);
}
inline ::TransportCataloguePB::Color* RenderSettings::_internal_add_color_palette() {
  return _impl_.color_palette_.Add();
}
inline ::TransportCataloguePB::Color* RenderSettings::add_color_palette() {
  ::TransportCataloguePB::Color* _add = _internal_add_color_palette();
  // @@protoc_insertion_point(field_add:TransportCataloguePB.RenderSettings.color_palette)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransportCataloguePB::Color >&
RenderSettings::color_palette() const {
  // @@protoc_insertion_point(field_list:TransportCataloguePB.RenderSettings.color_palette)
  return _impl_.color_palette_;
}

// -------------------------------------------------------------------

// RoutingSettings

// double bus_wait_time = 1;
inline void RoutingSettings::clear_bus_wait_time() {
  _impl_.bus_wait_time_ = 0;
}
inline double RoutingSettings::_internal_bus_wait_time() const {
  return _impl_.bus_wait_time_;
}
inline double RoutingSettings::bus_wait_time() const {
  // @@protoc_insertion_point(field_get:TransportCataloguePB.RoutingSettings.bus_wait_time)
  return _internal_bus_wait_time();
}
inline void RoutingSettings::_internal_set_bus_wait_time(double value) {
  
  _impl_.bus_wait_time_ = value;
}
inline void RoutingSettings::set_bus_wait_time(double value) {
  _internal_set_bus_wait_time(value);
  // @@protoc_insertion_point(field_set:TransportCataloguePB.RoutingSettings.bus_wait_time)
}

// double bus_velocity = 2;
inline void RoutingSettings::clear_bus_velocity() {
  _impl_.bus_velocity_ = 0;
}
inline double RoutingSettings::_internal_bus_velocity() const {
  return _impl_.bus_velocity_;
}
inline double RoutingSettings::bus_velocity() const {
  // @@protoc_insertion_point(field_get:TransportCataloguePB.RoutingSettings.bus_velocity)
  return _internal_bus_velocity();
}
inline void RoutingSettings::_internal_set_bus_velocity(double value) {
  
  _impl_.bus_velocity_ = value;
}
inline void RoutingSettings::set_bus_velocity(double value) {
  _internal_set_bus_velocity(value);
  // @@protoc_insertion_point(field_set:TransportCataloguePB.RoutingSettings.bus_velocity)
}

// -------------------------------------------------------------------

// AllInfo

// .TransportCataloguePB.TransportCatalogue catalogue = 1;
inline bool AllInfo::_internal_has_catalogue() const {
  return this != internal_default_instance() && _impl_.catalogue_ != nullptr;
}
inline bool AllInfo::has_catalogue() const {
  return _internal_has_catalogue();
}
inline void AllInfo::clear_catalogue() {
  if (GetArenaForAllocation() == nullptr && _impl_.catalogue_ != nullptr) {
    delete _impl_.catalogue_;
  }
  _impl_.catalogue_ = nullptr;
}
inline const ::TransportCataloguePB::TransportCatalogue& AllInfo::_internal_catalogue() const {
  const ::TransportCataloguePB::TransportCatalogue* p = _impl_.catalogue_;
  return p != nullptr ? *p : reinterpret_cast<const ::TransportCataloguePB::TransportCatalogue&>(
      ::TransportCataloguePB::_TransportCatalogue_default_instance_);
}
inline const ::TransportCataloguePB::TransportCatalogue& AllInfo::catalogue() const {
  // @@protoc_insertion_point(field_get:TransportCataloguePB.AllInfo.catalogue)
  return _internal_catalogue();
}
inline void AllInfo::unsafe_arena_set_allocated_catalogue(
    ::TransportCataloguePB::TransportCatalogue* catalogue) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.catalogue_);
  }
  _impl_.catalogue_ = catalogue;
  if (catalogue) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TransportCataloguePB.AllInfo.catalogue)
}
inline ::TransportCataloguePB::TransportCatalogue* AllInfo::release_catalogue() {
  
  ::TransportCataloguePB::TransportCatalogue* temp = _impl_.catalogue_;
  _impl_.catalogue_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TransportCataloguePB::TransportCatalogue* AllInfo::unsafe_arena_release_catalogue() {
  // @@protoc_insertion_point(field_release:TransportCataloguePB.AllInfo.catalogue)
  
  ::TransportCataloguePB::TransportCatalogue* temp = _impl_.catalogue_;
  _impl_.catalogue_ = nullptr;
  return temp;
}
inline ::TransportCataloguePB::TransportCatalogue* AllInfo::_internal_mutable_catalogue() {
  
  if (_impl_.catalogue_ == nullptr) {
    auto* p = CreateMaybeMessage<::TransportCataloguePB::TransportCatalogue>(GetArenaForAllocation());
    _impl_.catalogue_ = p;
  }
  return _impl_.catalogue_;
}
inline ::TransportCataloguePB::TransportCatalogue* AllInfo::mutable_catalogue() {
  ::TransportCataloguePB::TransportCatalogue* _msg = _internal_mutable_catalogue();
  // @@protoc_insertion_point(field_mutable:TransportCataloguePB.AllInfo.catalogue)
  return _msg;
}
inline void AllInfo::set_allocated_catalogue(::TransportCataloguePB::TransportCatalogue* catalogue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.catalogue_;
  }
  if (catalogue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(catalogue);
    if (message_arena != submessage_arena) {
      catalogue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, catalogue, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.catalogue_ = catalogue;
  // @@protoc_insertion_point(field_set_allocated:TransportCataloguePB.AllInfo.catalogue)
}

// .TransportCataloguePB.RenderSettings render_settings = 2;
inline bool AllInfo::_internal_has_render_settings() const {
  return this != internal_default_instance() && _impl_.render_settings_ != nullptr;
}
inline bool AllInfo::has_render_settings() const {
  return _internal_has_render_settings();
}
inline void AllInfo::clear_render_settings() {
  if (GetArenaForAllocation() == nullptr && _impl_.render_settings_ != nullptr) {
    delete _impl_.render_settings_;
  }
  _impl_.render_settings_ = nullptr;
}
inline const ::TransportCataloguePB::RenderSettings& AllInfo::_internal_render_settings() const {
  const ::TransportCataloguePB::RenderSettings* p = _impl_.render_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::TransportCataloguePB::RenderSettings&>(
      ::TransportCataloguePB::_RenderSettings_default_instance_);
}
inline const ::TransportCataloguePB::RenderSettings& AllInfo::render_settings() const {
  // @@protoc_insertion_point(field_get:TransportCataloguePB.AllInfo.render_settings)
  return _internal_render_settings();
}
inline void AllInfo::unsafe_arena_set_allocated_render_settings(
    ::TransportCataloguePB::RenderSettings* render_settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.render_settings_);
  }
  _impl_.render_settings_ = render_settings;
  if (render_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TransportCataloguePB.AllInfo.render_settings)
}
inline ::TransportCataloguePB::RenderSettings* AllInfo::release_render_settings() {
  
  ::TransportCataloguePB::RenderSettings* temp = _impl_.render_settings_;
  _impl_.render_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TransportCataloguePB::RenderSettings* AllInfo::unsafe_arena_release_render_settings() {
  // @@protoc_insertion_point(field_release:TransportCataloguePB.AllInfo.render_settings)
  
  ::TransportCataloguePB::RenderSettings* temp = _impl_.render_settings_;
  _impl_.render_settings_ = nullptr;
  return temp;
}
inline ::TransportCataloguePB::RenderSettings* AllInfo::_internal_mutable_render_settings() {
  
  if (_impl_.render_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::TransportCataloguePB::RenderSettings>(GetArenaForAllocation());
    _impl_.render_settings_ = p;
  }
  return _impl_.render_settings_;
}
inline ::TransportCataloguePB::RenderSettings* AllInfo::mutable_render_settings() {
  ::TransportCataloguePB::RenderSettings* _msg = _internal_mutable_render_settings();
  // @@protoc_insertion_point(field_mutable:TransportCataloguePB.AllInfo.render_settings)
  return _msg;
}
inline void AllInfo::set_allocated_render_settings(::TransportCataloguePB::RenderSettings* render_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.render_settings_;
  }
  if (render_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(render_settings);
    if (message_arena != submessage_arena) {
      render_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, render_settings, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.render_settings_ = render_settings;
  // @@protoc_insertion_point(field_set_allocated:TransportCataloguePB.AllInfo.render_settings)
}

// .TransportCataloguePB.RoutingSettings routing_settings = 3;
inline bool AllInfo::_internal_has_routing_settings() const {
  return this != internal_default_instance() && _impl_.routing_settings_ != nullptr;
}
inline bool AllInfo::has_routing_settings() const {
  return _internal_has_routing_settings();
}
inline void AllInfo::clear_routing_settings() {
  if (GetArenaForAllocation() == nullptr && _impl_.routing_settings_ != nullptr) {
    delete _impl_.routing_settings_;
  }
  _impl_.routing_settings_ = nullptr;
}
inline const ::TransportCataloguePB::RoutingSettings& AllInfo::_internal_routing_settings() const {
  const ::TransportCataloguePB::RoutingSettings* p = _impl_.routing_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::TransportCataloguePB::RoutingSettings&>(
      ::TransportCataloguePB::_RoutingSettings_default_instance_);
}
inline const ::TransportCataloguePB::RoutingSettings& AllInfo::routing_settings() const {
  // @@protoc_insertion_point(field_get:TransportCataloguePB.AllInfo.routing_settings)
  return _internal_routing_settings();
}
inline void AllInfo::unsafe_arena_set_allocated_routing_settings(
    ::TransportCataloguePB::RoutingSettings* routing_settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.routing_settings_);
  }
  _impl_.routing_settings_ = routing_settings;
  if (routing_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TransportCataloguePB.AllInfo.routing_settings)
}
inline ::TransportCataloguePB::RoutingSettings* AllInfo::release_routing_settings() {
  
  ::TransportCataloguePB::RoutingSettings* temp = _impl_.routing_settings_;
  _impl_.routing_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TransportCataloguePB::RoutingSettings* AllInfo::unsafe_arena_release_routing_settings() {
  // @@protoc_insertion_point(field_release:TransportCataloguePB.AllInfo.routing_settings)
  
  ::TransportCataloguePB::RoutingSettings* temp = _impl_.routing_settings_;
  _impl_.routing_settings_ = nullptr;
  return temp;
}
inline ::TransportCataloguePB::RoutingSettings* AllInfo::_internal_mutable_routing_settings() {
  
  if (_impl_.routing_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::TransportCataloguePB::RoutingSettings>(GetArenaForAllocation());
    _impl_.routing_settings_ = p;
  }
  return _impl_.routing_settings_;
}
inline ::TransportCataloguePB::RoutingSettings* AllInfo::mutable_routing_settings() {
  ::TransportCataloguePB::RoutingSettings* _msg = _internal_mutable_routing_settings();
  // @@protoc_insertion_point(field_mutable:TransportCataloguePB.AllInfo.routing_settings)
  return _msg;
}
inline void AllInfo::set_allocated_routing_settings(::TransportCataloguePB::RoutingSettings* routing_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.routing_settings_;
  }
  if (routing_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(routing_settings);
    if (message_arena != submessage_arena) {
      routing_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, routing_settings, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.routing_settings_ = routing_settings;
  // @@protoc_insertion_point(field_set_allocated:TransportCataloguePB.AllInfo.routing_settings)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TransportCataloguePB

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto
